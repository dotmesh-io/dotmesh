load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
load("@io_bazel_rules_docker//docker:docker.bzl", "docker_push")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")

go_library(
    name = "go_default_library",
    srcs = [
        "auth_handler.go",
        "checkupdates.go",
        "controller.go",
        "controller_fsm.go",
        "docker.go",
        "dockerclient.go",
        "etcd.go",
        "etcd_filesystem_watchers.go",
        "etcd_registry_watchers.go",
        "etcd_server_watchers.go",
        "http.go",
        "kubernetes.go",
        "liveness.go",
        "main.go",
        "messaging.go",
        "replication.go",
        "rpc.go",
        "s3.go",
        "s3_handlers.go",
        "types.go",
        "users.go",
        "utils.go",
    ],
    importpath = "github.com/dotmesh-io/dotmesh/cmd/dotmesh-server",
    visibility = ["//visibility:private"],
    deps = [
        "//pkg/auth:go_default_library",
        "//pkg/client:go_default_library",
        "//pkg/container:go_default_library",
        "//pkg/fsm:go_default_library",
        "//pkg/messaging:go_default_library",
        "//pkg/messaging/nats:go_default_library",
        "//pkg/metrics:go_default_library",
        "//pkg/notification:go_default_library",
        "//pkg/notification/nats:go_default_library",
        "//pkg/observer:go_default_library",
        "//pkg/registry:go_default_library",
        "//pkg/store:go_default_library",
        "//pkg/types:go_default_library",
        "//pkg/user:go_default_library",
        "//pkg/utils:go_default_library",
        "//pkg/uuid:go_default_library",
        "//pkg/validator:go_default_library",
        "//pkg/zfs:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/aws:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/aws/credentials:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/aws/session:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/service/s3:go_default_library",
        "//vendor/github.com/aws/aws-sdk-go/service/s3/s3manager:go_default_library",
        "//vendor/github.com/coreos/etcd/client:go_default_library",
        "//vendor/github.com/dotmesh-io/go-checkpoint:go_default_library",
        "//vendor/github.com/gorilla/handlers:go_default_library",
        "//vendor/github.com/gorilla/mux:go_default_library",
        "//vendor/github.com/gorilla/rpc/v2:go_default_library",
        "//vendor/github.com/gorilla/rpc/v2/json2:go_default_library",
        "//vendor/github.com/nu7hatch/gouuid:go_default_library",
        "//vendor/github.com/opentracing/opentracing-go:go_default_library",
        "//vendor/github.com/openzipkin/zipkin-go-opentracing:go_default_library",
        "//vendor/github.com/openzipkin/zipkin-go-opentracing/examples/middleware:go_default_library",
        "//vendor/github.com/portworx/kvdb:go_default_library",
        "//vendor/github.com/prometheus/client_golang/prometheus/promhttp:go_default_library",
        "//vendor/github.com/sirupsen/logrus:go_default_library",
        "//vendor/golang.org/x/net/context:go_default_library",
    ],
)

go_binary(
    name = "dotmesh-server",
    embed = [":go_default_library"],
    goarch = "amd64",
    goos = "linux",
    pure = "on",
    visibility = ["//visibility:public"],
    x_defs = {"main.serverVersion": "{STABLE_VERSION}"},
)

container_image(
    name = "dotmesh-server-img",
    base = "//:dotmesh-base.tar",
    directory = "/usr/local/bin",
    files = [
        "//cmd/dotmesh-server",
        "//cmd/flexvolume",
    ],
    stamp = True,
    visibility = ["//visibility:public"],
)

docker_push(
    name = "dotmesh-server_push",
    image = ":dotmesh-server-img",
    registry = "{CI_REGISTRY}",
    repository = "{CI_REPOSITORY}/dotmesh-server",
    stamp = 1,
    tag = "{STABLE_DOCKERTAG}",
)

go_test(
    name = "go_default_test",
    srcs = ["http_test.go"],
    embed = [":go_default_library"],
)
